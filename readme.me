Chapter_1.

	* Why We Learn Gits.
	-- What Happens When We Git Commit.
   	-- What Is Stored At Each Commit.
	-- What Does Git Init Actully Do.
	
	* Why Do We Care.	
	-- We Are Pros.
	-- It`s Useful.
	-- It`s Cool.
						HOW WILL THIS WORK
						------------------
	* Objects - Blobs,Trees,Commits.
	* Branches.
	* Working Directory,Staging Area,Repository.
	* Creating A New Repository.
		-- Without Using (git init),(git add),(git commit)
	* Manipulating Branches.
		-- Without Using Git Branch Git Checkout.

Chapter_2.
		
						GIT INTERNALS OBJECTS.
						---------------------
	Read-Section.
	------------
	* Any File Content Change Linked ALL ( BLOB And Tree ) Sha-1 Changes.


	* BLOB -- Contents Of File.
	* Tree -- A Directory Listing ( Of Blobs And Trees )
	* Commit -- Takes Snapshot of Tree.


	command-section
	---------------
	
	> Create mkdir .git
	> Create mkdir .git/HEAD -- reference of master
	> Create mkdir .git/objects
	> Create mkdr  .git/refs/heads/master
	> echo ref:refs/heads/master > .git/HEAD
	> git status -- now working file.


	> echo "hello" | git hash-object --stdin -w
	   
		--stdin read form the stdin.
		-w write in objects directory.
			
		
	    Returns The BLOB -- A3535AGH

	> git update-index --add --cacheinfo (permessions) (BLOB OR TREE) (filename)
	> git write-tree  --> create a tree and return object-id.
	> git commit-tree (object-id) -m $(message) -p ( null or object-id)
	> echo $(commit-id) > .git/refs/master
	> git log -- working file now 
	

	
	CREATING BRANCHES.
	-----------------
	> mkdir .git/refs/heads/master2
	> echo $(parent-commit-id) > .git/refs/heads/test
	> echo ref:refs/heads/master2 > .git/HEAD
	

	
	ARCHITECTURE .git
	-----------------

		.git 
			- HEAD -- Reference Of Head
			- index	-- stages file are here 
			- objects 
			  55
			    -(BLOB)
			  75
			    -(Tree)
			  88
		   	    -(commit-d)
			- ref
			  - heads
			    - master  -- holds commit-id
			    - test    -- holds commit-id ( second branch )

	GIT COMMANDS
      	------------
		
		git add $(filename)
		git commit -m $(message)
		git remote add origin $(repository-lnk)
		git push origin master

		git branch master1 -- Creating New Branch ( Present Branch Clone )
		git checkout master -- Switch Branch.

		git cat-file -p $(object-id) -- reads file content.
		gt cat-file -t  $(object-id) -- that`s says which type of object.

Chapter_3.
		
		git reset --soft $(commit-id)  -- Remove All Files Repo And Add Staging Area
		git reset --mixed $(commit-id) -- Removed Staging And File Exists In Work-Dir
		git reset --hard $(commit-id)  -- Removed Work-Dir And Staging Area.




	
Chapter_4 

		git rev-parse HEAD~1   -- Return The (Commit Id)
		git cherry-pick $(commit-id)
		git revert (commit-id)	
		git reflog  -- Updates The Hisotory What You Do.

 
Chapter_5

	git rebase -i 
	git merge -i 		
